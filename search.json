[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 engineerbunny authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Braddock. Maintainer, author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Braddock D (2024). engineerbunny: Data Engineering Tools. R package version 0.1.0, https://danielbraddock.github.io/engineerbunny/.","code":"@Manual{,   title = {engineerbunny: Data Engineering Tools},   author = {Daniel Braddock},   year = {2024},   note = {R package version 0.1.0},   url = {https://danielbraddock.github.io/engineerbunny/}, }"},{"path":"/index.html","id":"engineerbunny","dir":"","previous_headings":"","what":"Data Engineering Tools","title":"Data Engineering Tools","text":"goal engineerbunny facilitate data engineering.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data Engineering Tools","text":"can install development version engineerbunny GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"DanielBraddock/engineerbunny\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Data Engineering Tools","text":"Examples follow!","code":""},{"path":"/reference/engineerbunny-package.html","id":null,"dir":"Reference","previous_headings":"","what":"engineerbunny: Data Engineering Tools — engineerbunny-package","title":"engineerbunny: Data Engineering Tools — engineerbunny-package","text":"Engineer datasets (just like ).","code":""},{"path":[]},{"path":"/reference/engineerbunny-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"engineerbunny: Data Engineering Tools — engineerbunny-package","text":"Maintainer: Daniel Braddock nobody@noreply.com","code":""},{"path":"/reference/keys_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check columns form a key — keys_check","title":"Check columns form a key — keys_check","text":"Indicates whether columns selected keys truly form key ie sufficient identify unique complete rows","code":""},{"path":"/reference/keys_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check columns form a key — keys_check","text":"","code":"keys_check(df, keys)"},{"path":"/reference/keys_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check columns form a key — keys_check","text":"df data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). keys Selection columns using tidyselect","code":""},{"path":"/reference/keys_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check columns form a key — keys_check","text":"Whether given variables form key ie sufficient specify uniqueness completeness. TRUE / FALSE","code":""},{"path":"/reference/keys_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check columns form a key — keys_check","text":"TRUE still possible sub-selection form key","code":""},{"path":"/reference/keys_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check columns form a key — keys_check","text":"","code":"if (FALSE) { # \\dontrun{ iris |> mutate(Species_id = row_number(), .by = Species) |> keys_check(contains(\"Species\")) # TRUE iris |> mutate(id = row_number()) |> keys_check(id) # TRUE iris |> keys_check(everything()) # FALSE iris |> distinct() |> keys_check(everything()) # TRUE iris |> keys_check(c(starts_with(\"Sepal\"), starts_with(\"Petal\"))) # FALSE iris |> keys_check(starts_with(\"Sepal\")) # FALSE iris |> keys_check(Species) # FALSE } # }"},{"path":"/reference/keys_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the times each unique key level appears and hence number of dupes — keys_count","title":"Count the times each unique key level appears and hence number of dupes — keys_count","text":"Count times unique key level appears hence number dupes","code":""},{"path":"/reference/keys_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the times each unique key level appears and hence number of dupes — keys_count","text":"","code":"keys_count(df, keys)"},{"path":"/reference/keys_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the times each unique key level appears and hence number of dupes — keys_count","text":"df data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). keys Selection columns using tidyselect","code":""},{"path":"/reference/keys_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the times each unique key level appears and hence number of dupes — keys_count","text":"data.frame, dtplyr_step_mutate, results listing unique levels keys counts","code":""},{"path":"/reference/keys_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the times each unique key level appears and hence number of dupes — keys_count","text":"","code":"if (FALSE) { # \\dontrun{ iris |> mutate(Species_id = row_number(), .by = Species) |> keys_count(Species_id) iris |> mutate(id = row_number()) |> keys_count(id) } # }"},{"path":"/reference/keys_interrogate_failure.html","id":null,"dir":"Reference","previous_headings":"","what":"Find and compare an example of duplication — keys_interrogate_failure","title":"Find and compare an example of duplication — keys_interrogate_failure","text":"Find compare example duplication","code":""},{"path":"/reference/keys_interrogate_failure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find and compare an example of duplication — keys_interrogate_failure","text":"","code":"keys_interrogate_failure(df, keys, dupe_severity = 1, dupe_id = 1)"},{"path":"/reference/keys_interrogate_failure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find and compare an example of duplication — keys_interrogate_failure","text":"df data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). keys Selection columns using: * tidyselect * names (string) ie character vector like keys_*() functions, using: * unquoted expressions dupe_severity level duplication required comparison dupe_id example given id. Change different example.","code":""},{"path":"/reference/keys_interrogate_failure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find and compare an example of duplication — keys_interrogate_failure","text":"data.frame listing columns ideally form key columns responsible key key ","code":""},{"path":"/reference/keys_interrogate_failure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find and compare an example of duplication — keys_interrogate_failure","text":"","code":"if (FALSE) { # \\dontrun{ iris |> mutate(x = row_number()) |> keys_interrogate_failure(starts_with(\"Sepal\")) iris |> mutate(x = row_number()) |> keys_interrogate_failure(c(\"Sepal.Length\" , \"Sepal.Width\", \"Petal.Length\")) iris |> mutate(x = row_number()) |> keys_interrogate_failure(c(\"Sepal.Length\" , \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\")) try(iris |> mutate(x = row_number()) |> keys_interrogate_failure(c(\"Sepal.Length\" , \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\", \"x\"))) } # }"},{"path":"/reference/keys_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Count severity of duplication using a selection of columns — keys_profile","title":"Count severity of duplication using a selection of columns — keys_profile","text":"Profile different levels (severity) dupes (0, 1, 2, ... dupes) present data whereby uniqueness defined \"keys\"","code":""},{"path":"/reference/keys_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count severity of duplication using a selection of columns — keys_profile","text":"","code":"keys_profile(df, keys)"},{"path":"/reference/keys_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count severity of duplication using a selection of columns — keys_profile","text":"df data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). keys Selection columns using tidyselect","code":""},{"path":"/reference/keys_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count severity of duplication using a selection of columns — keys_profile","text":"data.frame, dtplyr_step_mutate, results profiling many levels keys 0 dupes, 1 dupe, 2 dupes ","code":""},{"path":"/reference/keys_profile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count severity of duplication using a selection of columns — keys_profile","text":"keys really keys resulting tibble one row. row shows n (= nrow(df)) unique combinations levels keys 0 dupes . Otherwise resulting tibble multiple rows. row shows many unique combination keys 0 dupes, 1 dupe, 2 dupes etc. , \"many\" bit profile \"0 dupes\" bit severity. case, keys really quite right word: even single dupe proves keys really keys ","code":""},{"path":"/reference/keys_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count severity of duplication using a selection of columns — keys_profile","text":"","code":"if (FALSE) { # \\dontrun{ iris |> mutate(Species_id = row_number(), .by = Species) |> keys_profile_dupe_severity(contains(\"Species\")) iris |> mutate(id = row_number()) |> keys_profile_dupe_severity(id) iris |> keys_profile_dupe_severity(everything()) iris |> keys_profile_dupe_severity(c(starts_with(\"Sepal\"), starts_with(\"Petal\"))) iris |> keys_profile_dupe_severity(starts_with(\"Sepal\")) iris |> keys_profile_dupe_severity(Species) } # }"},{"path":"/reference/scrape_feather.html","id":null,"dir":"Reference","previous_headings":"","what":"Read all feather files after a pattern into a list of datasets — scrape_feather","title":"Read all feather files after a pattern into a list of datasets — scrape_feather","text":"Read feather files pattern list datasets","code":""},{"path":"/reference/scrape_feather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read all feather files after a pattern into a list of datasets — scrape_feather","text":"","code":"scrape_feather(dir, as_data_table = TRUE, pattern = \".*\", negate = FALSE)"},{"path":"/reference/scrape_feather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read all feather files after a pattern into a list of datasets — scrape_feather","text":"dir <chr> file path scrape .feather files as_data_table whether convert dataset data.table pattern <chr> regex match file names negate <chr> passed str_detect selecting files","code":""},{"path":"/reference/scrape_feather.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read all feather files after a pattern into a list of datasets — scrape_feather","text":"named list datasets scraped dir, named match file name, defaults TRUE","code":""},{"path":"/reference/scrape_feather.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read all feather files after a pattern into a list of datasets — scrape_feather","text":"","code":"if (FALSE) splits <- scrape_feather(\"Data\") # \\dontrun{}"}]
